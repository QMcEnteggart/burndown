#!/bin/bash

# orgserver
#
#     Start the org-mode data server, on the specified org data Git
# repository $ORG, with the specified projects $PRO.  Attempts to
# refresh the org data and project with "git pull origin master".  If
# changes are detected in the source, attempts to restart the server.
#
#     Can be run with a cron job to regularly refresh the org data,
# and attempt to restart the server.
#

export PYTHONPATH=/usr/local/lib/python2.7/site-packages:${PYTHONPATH}

RUN="${0##*/}-$( printf "%05d" $$ ):"
DIR=${0%/*}
ORG=${ORG_DIRECTORY:-~/org}
PRO=${ORG_PROJECTS:-}
RES=0
PID=${ORG}/orgserver.pid # +.##### contains PID of this orgserver's orgserver.py
OPT="--server=web.py --address 0.0.0.0:8080 --redundant"

while (( $# > 0 )); do
    if [[ "$1" == "--restart" ]]; then
        RES=1
    elif [[ "$1" == "--help" ]]; then
        echo "${RUN} --help --restart [project [...]]"
    else
        # All remaining options are projects
        PRO="${PRO}${PRO:+ }${1}"
    fi
    shift
done

echo "${RUN} Directory: ${ORG}"
echo "${RUN} Projects:  ${PRO}"

# Kill our orgserver.py and clean up our PID file on exit
trap cleanup EXIT
cleanup () {
    kill $( cat $PID.$$ )
    rm -f $PID.$$
}

echo "${RUN} Refreshing $ORG..."
( cd $ORG && git pull origin master )

echo "${RUN} Refreshing $DIR..."
(
    cd $DIR
    master=$( git show --oneline )
    git pull origin master
    if [[ "$( git show --oneline )" != "$master" ]]; then
        echo "Detected $DIR update"
        RES=1
    fi
    if (( RES )); then
        echo "${RUN} Restarting orgserver.py"
        for pid in $PID.*; do
            if [ -f $pid ]; then
                kill $( cat $pid )
                rm $pid
            fi
            sleep 1
        done
    fi
)

# Run the python orgserver.py, savings its PID, and waiting 'til it
# exits
CMD="${DIR}/orgserver.py ${OPT} ${ORG} ${PRO}"
echo "${RUN} Starting: $CMD"
$CMD &
echo $! >> $PID.$$
wait $!
if (( $? )); then
    echo "${RUN} Failed: $?"
else
    echo "${RUN} Exiting."
fi
